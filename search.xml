<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解JavaScript的arguments</title>
      <link href="/2019/04/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%9A%84arguments/"/>
      <url>/2019/04/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E7%9A%84arguments/</url>
      
        <content type="html"><![CDATA[<p>在函数内部，有两个特殊对象：arguments和this。arguments是用于存储函数参数的类数组对象，所有非箭头函数都可调用的局部变量。</p><h6 id="类数组对象"><a href="#类数组对象" class="headerlink" title="类数组对象"></a>类数组对象</h6><p>类数组本质上是object，而不是Array，它拥有和数组一样的length和索引从0开始的属性，但是没有数组的内置方法。但是它可以转换为一个真正的Array，使其可以直接调用数组拥有的方法。</p><ol><li><p>使用Array.from()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr = Array.from(arguments)</span><br></pre></td></tr></table></figure></li><li><p>使用拓展运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let arr = [...arguments]</span><br></pre></td></tr></table></figure></li><li><p>使用call()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr = Array.prototype.slice.call(arguments)</span><br><span class="line">let arr = [].slice.call(arguments)</span><br></pre></td></tr></table></figure></li></ol><p>那么，它的实现原理是什么？我们可以看成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr = Array.from(arguments)</span><br><span class="line">arr.slice()</span><br></pre></td></tr></table></figure></p><ol start="4"><li>对参数使用slice会阻止某些JavaScript引擎中的优化 (比如 V8)。如果你关心性能，尝试通过遍历arguments对象来构造一个新的数组。另一种方法是使用被忽视的Array构造函数作为一个函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));</span><br></pre></td></tr></table></figure></li></ol><p><strong><em>Tips</em></strong></p><p>简单介绍一下call()和apply()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call(thisObj, arg1, arg2, ...)</span><br><span class="line"></span><br><span class="line">apply(thisObj, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure></p><p>call()和apply()定义都是”调用一个对象上的方法，以另一个对象替代当前对象“<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A.call(B, arg1, arg2)</span><br><span class="line">A.apply(B, arguments)</span><br><span class="line">// 两者都表示B调用A的方法</span><br></pre></td></tr></table></figure></p><p>apply的一些妙用</p><ol><li>配合Math.max/min(param1, param2,…)获得一个数组中的最大/最小值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [10, 2, 6, 5]</span><br><span class="line">let max = Math.max.apply(null, arr) // 10</span><br><span class="line">let min = Math.min.apply(null, arr) // 2</span><br><span class="line">// apply()会将数组转换为一个参数接一个参数的形式</span><br></pre></td></tr></table></figure></li></ol><p>当然，还有更简单的办法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arr = [10, 2, 6, 5]</span><br><span class="line">let max = Math.max(...arr) // 10</span><br><span class="line">let min = Math.min(...arr) // 2</span><br></pre></td></tr></table></figure></p><h6 id="arguments的使用场景"><a href="#arguments的使用场景" class="headerlink" title="arguments的使用场景"></a>arguments的使用场景</h6><p>如果调用的参数多于正式声明接受的参数，则可以使用arguments对象。这种技术对于可以传递可变数量的参数的函数很有用。使用 arguments.length来确定传递给函数参数的个数，然后使用arguments对象来处理每个参数。要确定函数签名中（输入）参数的数量，请使用Function.length属性。</p><ol><li>函数重载</li></ol><p>同一作用域下方法名相同但参数类型、参数顺序不同、参数个数不同，叫做函数重载</p><p><strong><em>javascript中不存在函数重载！！！</em></strong></p><p>为什么js没有函数重载，举例说明：根据函数重载的定义，我们定义两个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function test(num) &#123;</span><br><span class="line">console.log(num + 100)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test(num) &#123;</span><br><span class="line">console.log(num + 10)</span><br><span class="line">&#125;</span><br><span class="line">test(10) // result:20</span><br></pre></td></tr></table></figure></p><p>可以看到，再js中，当方法名相同的时候，后面的函数会覆盖前面的函数</p><p>接着，我们来比较一下JavaScript和Java：</p><table><thead><tr><th style="text-align:center">语言</th><th style="text-align:center">语言类型</th><th style="text-align:center">确定函数</th><th></th><th style="text-align:center">参数表现形式</th></tr></thead><tbody><tr><td style="text-align:center">Java</td><td style="text-align:center">强类型语言(int,string等)</td><td style="text-align:center">方法签名</td><td></td><td style="text-align:center">实参和形参一一对应</td></tr><tr><td style="text-align:center">JavaScript</td><td style="text-align:center">弱类型语言(var)</td><td style="text-align:center">函数名</td><td></td><td style="text-align:center">参数个数由实参决定</td></tr></tbody></table><p>为什么JavaScript方法完全依靠函数名确定？？</p><p>理想中，我们做函数重载的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test(string a, int b) &#123;&#125; // A</span><br><span class="line">function test(string b, int a) &#123;&#125; // B</span><br><span class="line"></span><br><span class="line">test(&apos;hello world&apos;, 10) // 调用A</span><br><span class="line">test(10, &apos;hello world&apos;) // 调用B</span><br></pre></td></tr></table></figure></p><p>然而，残酷的现实来了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test(var a, var b) &#123;&#125; // A</span><br><span class="line">function test(var b, var a) &#123;&#125; // B</span><br><span class="line"></span><br><span class="line">test(&apos;hello world&apos;, 10)</span><br><span class="line">test(10, &apos;hello world&apos;)</span><br></pre></td></tr></table></figure><p>js引擎到底该调用哪一个…</p><p>所以，言归正传，当我们想在JavaScript中实现函数重载的时候，arguments就派上用场了，通过判断arguments的长度来实现重载：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function func() &#123;</span><br><span class="line">var len = arguments.lenght</span><br><span class="line">   if (len === 1) &#123;</span><br><span class="line">   &#125; else if (len === 2) &#123;</span><br><span class="line">   &#125; else &#123;&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>arguments.callee实现递归(ES5严格模式已经删除arguments.callee)</li></ol><p>以实现一个阶乘为例：</p><p>一般，我们实现一个递归函数，是直接使用函数表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function factorial (n) &#123;</span><br><span class="line">    return !(n &gt; 1) ? 1 : factorial(n - 1) * n;</span><br><span class="line">&#125;</span><br><span class="line">[1,2,3,4,5].map(factorial);</span><br></pre></td></tr></table></figure><p>但是，当我们要递归的函数是一个匿名函数的时候：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].map(function (n) &#123;</span><br><span class="line">    return !(n &gt; 1) ? 1 : /* what goes here? */ (n - 1) * n;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以，我们可以这样做：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5].map(function (n) &#123;</span><br><span class="line">    return !(n &gt; 1) ? 1 : arguments.callee(n - 1) * n;</span><br><span class="line">&#125;);// arguments.callee表示引用当前正在执行的函数</span><br></pre></td></tr></table></figure><ol start="3"><li>不定参数的函数（以参数求和为例）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function add() &#123;</span><br><span class="line">    var sum =0,</span><br><span class="line">        len = arguments.length;</span><br><span class="line">    for(var i=0; i&lt;len; i++)&#123;</span><br><span class="line">        sum += arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">add() // 0</span><br><span class="line">add(1) // 1</span><br><span class="line">add(1,2,3,4); // 10</span><br></pre></td></tr></table></figure><p><em>未完待续~</em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-我的博客从无到有</title>
      <link href="/2019/03/25/hexo-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89/"/>
      <url>/2019/03/25/hexo-%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89/</url>
      
        <content type="html"><![CDATA[<h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><h6 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h6><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ol><h6 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure><h6 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h6><p>在电脑上找一个你喜欢的位置，打开你喜欢的命令行工具，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></p><h6 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成静态文件</span><br><span class="line">hexo s --debug // 打开服务器并进入debug模式，该模式下会自动更新页面改动</span><br><span class="line">hexo clean // 清空public</span><br><span class="line">hexo d // 部署网站</span><br><span class="line">hexo new [layout] &lt;title&gt; // 新建文章，layout默认为source/_posts</span><br></pre></td></tr></table></figure><h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><h6 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h6><p>hexo有默认主题，但是也可以选择自己喜欢的主题，在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题</a>中下载自己喜欢的主题。下面以nexT为例讲解主题的基本使用。</p><ol><li><p>下载主题<br>在站点hexo目录下，使用git checkout代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>启用主题<br>在站点配置文件_config.yml下，找到<code>theme</code>字段，将其值更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ol><p>接下来，你只需要参考<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">nexT官方文档</a>,就可以随心所欲搭建出你自己的博客啦。</p><h6 id="hexo-admin"><a href="#hexo-admin" class="headerlink" title="hexo-admin"></a>hexo-admin</h6><p>就目前而言，发布hexo博客的方式有如下几种：</p><ul><li>直接在服务器上编写，然后生成静态文件后部署</li><li>利用github+hook来管理，教程点击<a href>这里</a></li><li>其他（hexo或者other plugins）</li></ul><p>这里推荐使用 hexo-admin，而且编辑完之后可以马上看到效果呢。<br>需要说明的是，hexo-admin 管理是本地用的，就是你需要在本地编辑完之后再上传到 github，而不能直接在线编辑保存，因为 github pages 只支持静态页面的。</p><ol><li><p>安装hexo-admin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-admin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>启动<br>启动站点，你就可以在localhost://4000/admin/下面看到管理界面了。</p></li></ol><h4 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h4><h6 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h6><p>站内搜索就是可以搜索网站内的所有内容</p><ol><li><p>安装hexo-generator-searchdb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>修改站点配置文件<br>在站点配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path: search.xml</span><br><span class="line">field: post</span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件<br>在主题配置文件中找到<code>local_search</code>，修改为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">enable: true</span><br></pre></td></tr></table></figure></li><li><p>重启，这时候就可以看见搜索功能已经添加完成了</p></li></ol><h6 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h6><p>我用的是valine，只需要注册leancloud账号，就可以很顺手地实现评论功能。</p><ol><li>注册leancloud账号</li><li>创建一个应用，名字随意</li><li>在该应用下创建一个class,注意名字必须为 Counter，勾选无限制的权限</li><li>修改主题配置文件，找到<code>valine</code>，修改为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: xxx</span><br><span class="line">  appkey: xxx</span><br><span class="line">  notify: false # mail notifier ,    https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 走过路过，不留下点什么吗？ # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure></li></ol><p>其中app_id和app_key在你创建的应用设置里可以找到</p><ol start="5"><li>完成评论功能的设置</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给自己看的css</title>
      <link href="/2019/03/20/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84css/"/>
      <url>/2019/03/20/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84css/</url>
      
        <content type="html"><![CDATA[<h5 id="关于百分比padding在比例固定自适应图片中的妙用"><a href="#关于百分比padding在比例固定自适应图片中的妙用" class="headerlink" title="关于百分比padding在比例固定自适应图片中的妙用"></a>关于百分比padding在比例固定自适应图片中的妙用</h5><ol><li>css3 cal()：<ol><li>含义：用来指定元素的长度，可为元素的属性（width，margin， padding，border）等属性设置动态值，通常用在流体布局（百分比布局）中</li><li>语法：属性名：calc(expression)</li><li>规则：<ul><li>使用’ + ‘, ‘ - ‘, ‘ * ‘, ‘ / ‘四则运算;</li><li>可使用百分比，px, em, rem 等单位；</li><li>表达式中有’+’和’-‘时，前后必须要有空格；</li><li>可以混合使用各种单位进行运算；</li></ul></li><li>浏览器兼容性: ie9+</li><li>实际运用：<ul><li>子容器撑破父容器的问题：当子容器的width为100%时，如果再给子容器添加border、margin、padding时，子容器的宽度就是撑破父容器的宽度<br><strong>解决办法： 使用calc(),已知元素的宽度为100%, 则元素的宽度应为width：calc(100% - (margin+padding+border))</strong></li></ul></li></ol></li><li><p>百分比padding<br> 通常我们只会设置img: {width: 100%},从而让图片的高度跟随宽度一起等比例收缩，然而这种技巧有一个非常不好的体验问题，那就是随着页面加载的进行，图片占据的高度会有一个从0到计算高度的图片变化，视觉上会有明显的元素跳动，代码层面会有布局重计算。</p><p> 所以对图片宽高进行同时约定还是有必要的， 此时<strong>百分比padding</strong> 是最好的布局方式，即图片自适应的同时保持比例</p><p> 对于这种图片宽度100%容器，高度宽度按比例的场景，padding-bottom的百分比值大小就是图片元素的<strong>高宽比</strong>，就这么简单。</p><p> 但，有时候，图片宽度并不是100%容器的，例如，图片宽度50%容器宽度，图片高宽比4:3，此时，CSS垂直方向百分比就66.6了</p></li><li>demo: demo展示见css-padding.html</li></ol><hr><h5 id="消除display-inline-block产生的间距"><a href="#消除display-inline-block产生的间距" class="headerlink" title="消除display:inline-block产生的间距"></a>消除display:inline-block产生的间距</h5><ol><li>使用margin负值： margin-right:-3px;<br> 但是由于不同元素大小产生的margin负值是不一样的，所以不推荐使用该方法</li><li>使用font-size:0;设置父元素为font-size：0，再为子元素设置字体</li></ol><hr><h5 id="边框与背景（border-background-html）"><a href="#边框与背景（border-background-html）" class="headerlink" title="边框与背景（border-background.html）"></a>边框与背景（<strong><em>border-background.html</em></strong>）</h5><h6 id="半透明边框"><a href="#半透明边框" class="headerlink" title="半透明边框"></a>半透明边框</h6><ol><li>background-clip: border-box|padding-box|content-box; 规定背景色被划分的区域</li><li>兼容性： IE9+</li><li>hsla(Hue-Saturation-Lightness-Alpha): 与rgba相同，都可以设置颜色的透明度，但含义表示色调-饱和度-亮度-透明度，兼容性IE9+</li></ol><h6 id="多重边框"><a href="#多重边框" class="headerlink" title="多重边框"></a>多重边框</h6><ol><li>使用到的属性：border、outline、outline-offset、box-shadow</li><li>outline: color style width; 绘制与元素周围的一条线，位于边框的边缘，所有浏览器都支持</li><li>outline-offset: 规定outline的位置，可为负值，IE不支持，所以要实现outline+outline-offset的效果并兼容IE8+，有两种解决方案<ol><li>使用伪类元素before、after</li><li>用2个div实现</li></ol></li></ol><hr><h5 id="结构布局"><a href="#结构布局" class="headerlink" title="结构布局"></a>结构布局</h5><ol><li>圣杯布局(<strong><em>主要技巧是用到负的margin</em></strong>)<ol><li>结构: 左右两栏固定宽度，中间自适应</li><li>结构准备: 三栏放在同一个container中，其中middle部分放在第一，然后才是left, right</li><li>css准备: <ul><li>middle部分始终宽度100%, 并且让每一个div都float:left;</li><li>设置left的margin-left为-100%;</li><li>设置right的margin-left为负的right的宽</li><li>这个时候三者已经平行了，但是left和right遮挡了middle的内容，所以需要给container设置一个padding： 0 right-width 0 left-width；</li><li>设置了padding之后发现left，right都被向中间拉了，所以给3个div position：relative，并给left和right分别定位</li></ul></li><li>问题： 有一个最小宽度，当页面小于最小宽度的时候布局会乱掉，所以可以给body设置一个min-width：left-width * 2 + right-width，使用双飞翼布局可以解决这个问题。</li></ol></li><li>双飞翼布局<br> 双飞翼布局与圣杯布局的步骤大部分是相同的。只是在处理middle内容被遮盖上有不同，圣杯布局是采用padding来解决，而双飞翼布局采用margin解决，<br> 解决思路是在middle里面再套一个内层div, 给这个内层div添加margin：0 right-width 0 left-width;</li><li>flex布局</li><li>类订单布局</li><li>水平垂直居中<br> <strong><em>horizontal-vertical.html</em></strong></li></ol><h5 id="css实用小技巧"><a href="#css实用小技巧" class="headerlink" title="css实用小技巧"></a>css实用小技巧</h5><ol><li><p>max-width/height</p><ol><li><p>max-* 系列的权重非常高，甚至超过了!important</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">width: 200px !important;</span><br><span class="line">max-width: 150px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实例元素的最终高度最大为150px</p></li><li><p>当min-<em> 和max-</em> 相互冲突时，采取最大原则，即谁大取谁的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">min-width: 1400px;</span><br><span class="line">max-width: 1200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述实例元素的最后宽度是1400px</p></li></ol></li><li><p>‘三道杠’菜单小图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.icon-menu &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 140px;</span><br><span class="line">  height: 10px;</span><br><span class="line">  padding: 35px 0;</span><br><span class="line">  border-top: 10px solid;</span><br><span class="line">  border-bottom: 10px solid;</span><br><span class="line">  background-color: currentColor;</span><br><span class="line">  background-clip: content-box;</span><br><span class="line">&#125;</span><br><span class="line">&lt;span class=&quot;icon-menu&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li><p>去除最后一个列表元素的间隙：利用给父级margin一个负值，但是该方法增加了容器的可用宽度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.list &#123;</span><br><span class="line">  margin-right: -20px;</span><br><span class="line">  font-size: 0;</span><br><span class="line">&#125;</span><br><span class="line">.list-item &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: 1px solid;</span><br><span class="line">  margin-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">&lt;li class=&quot;list-item&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;list-item&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;list-item&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li><li><p>用vertical-align:middle实现永远垂直居中的对话框：（以下方法都不需要知道元素的宽高）</p><ol><li><p>实现思路：父元素设置text-align:center,添加一个居中元素的兄弟元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">       position: fixed;</span><br><span class="line">       top: 0;</span><br><span class="line">       right: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       left: 0;</span><br><span class="line">       text-align: center;</span><br><span class="line">       background-color: rgba(0, 0, 0, .2);</span><br><span class="line">   &#125;</span><br><span class="line">   .dialog &#123;</span><br><span class="line">       display: inline-block;</span><br><span class="line">       width: 500px;</span><br><span class="line">       height: 300px;</span><br><span class="line">       vertical-align: middle;</span><br><span class="line">       background-color: white;</span><br><span class="line">   &#125;</span><br><span class="line">   .asis &#123;</span><br><span class="line">       display: inline-block;</span><br><span class="line">       height: 100%;</span><br><span class="line">       vertical-align: middle;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;dialog&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;asis&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>实现思路:利用::after和vertical-align:middle实现，需要多嵌套一层</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.container &#123;</span><br><span class="line">       position: fixed;</span><br><span class="line">       top: 0;</span><br><span class="line">       right: 0;</span><br><span class="line">       bottom: 0;</span><br><span class="line">       left: 0;</span><br><span class="line">       text-align: center;</span><br><span class="line">       background-color: rgba(0, 0, 0, .2);</span><br><span class="line">   &#125;</span><br><span class="line">   .container::after &#123;</span><br><span class="line">       content: &quot;&quot;;</span><br><span class="line">       display: inline-block;</span><br><span class="line">       height: 100%;</span><br><span class="line">       vertical-align: middle;</span><br><span class="line">   &#125;</span><br><span class="line">   .dialog &#123;</span><br><span class="line">       display: inline-block;</span><br><span class="line">       vertical-align: middle;</span><br><span class="line">   &#125;</span><br><span class="line">   .content &#123;</span><br><span class="line">       width: 500px;</span><br><span class="line">       height: 300px;</span><br><span class="line">       background-color: white;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">           &lt;div class=&quot;content&quot;&gt;永远垂直居中的dialog&lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>实现最高性能去除下边框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">border: 1px solid;</span><br><span class="line">border-bottom: 0 none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用margin：auto做水平垂直居中(限制宽高)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin: auto;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>如何优雅得增加元素得点击区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.icon-clear &#123;</span><br><span class="line">    width: 16px;</span><br><span class="line">    height: 16px;</span><br><span class="line">    border: 11px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">&lt;label for=&quot;&quot; class=&quot;icon-clear&quot;&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure></li><li><p>无依赖absolute绝对定位<br>无依赖absolute绝对定位是指没有left/top/right/bottom, 使用margin辅助定位。好处是在某些场景下适应性较好<br>这么实现有两个好处，一个是我们不需要父级去加个relative后面要撤销，直接改 .son样式就好。 第二个好处就是某些场景适应性比依赖项定位好</p></li><li><p>单行显示和多行显示</p><ol><li><p>一般单行展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">width: 200px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">write-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一般多行展示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.element &#123;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2;</span><br><span class="line">width: 500px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>box-sizing</p><ol><li>兼容性: box-sizing虽然是css3的属性，但是它支持IE8，但是要加-ms-私有前缀，IE9就不需要加前缀了</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
